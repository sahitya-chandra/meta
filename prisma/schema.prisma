generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  password  String?
    image     String? 
    emailVerified    String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // NextAuth relations
  accounts  Account[]
  sessions  Session[]

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friendsA         Friend[]        @relation("FriendsA")
  friendsB         Friend[]        @relation("FriendsB")
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FriendRequest {
  id          String   @id @default(cuid())
  requester   User     @relation("SentRequests", fields: [requesterId], references: [id])
  requesterId String
  addressee   User     @relation("ReceivedRequests", fields: [addresseeId], references: [id])
  addresseeId String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friend {
  id      String @id @default(cuid())
  userA   User   @relation("FriendsA", fields: [userAId], references: [id])
  userAId String
  userB   User   @relation("FriendsB", fields: [userBId], references: [id])
  userBId String
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  createdAt  DateTime @default(now())
}
